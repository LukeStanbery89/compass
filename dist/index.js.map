{"mappings":";;;AAAA;;;ACAA,SAAS,+BAAS,CAAC,MAAM,EAAE;IACvB,IAAI,GAAG,AAAC;IAER,IAAI;QACA,GAAG,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC;KACzB,CAAC,OAAO,CAAC,EAAE;QACR,OAAO,KAAK,CAAC;KAChB;IAED,OAAO,GAAG,CAAC,QAAQ,KAAK,OAAO,IAAI,GAAG,CAAC,QAAQ,KAAK,QAAQ,CAAC;CAChE;AAED,yBAAc,GAAG;eACb,+BAAS;CACZ,CAAC;;;0CDbI,mCAAkC;AAExC,MAAM,mCAAa,GAAG,uCAAiB,EAAE,AAAC;AAC1C,MAAM,+BAAS,GAAG,mCAAa,CAAC,SAAS,AAAC;AAC1C,MAAM,gCAAU,GAAG,mCAAa,CAAC,UAAU,AAAC;AAE5C,SAAS,mCAAa,CAAC,OAAO,EAAE;IAC5B,MAAM,WAAW,GAAG,gCAAU,CAAC,OAAO,CAAC,AAAC;IACxC,IAAI,CAAC,WAAW,EACZ,MAAM,KAAK,CAAC,2CAA2C,CAAC,CAAC;IAE7D,MAAM,EAAE,GAAG,+BAAS,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,EAAE,AAAC;IAC7C,OAAO,CAAC,EAAE,WAAW,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,WAAW,CAAC,IAAI,CAAC,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;CACnF;AAED,SAAS,uCAAiB,GAAG;IACzB,MAAM,SAAS,GAAG,OAAO,CAAC,gBAAS,CAAC,kBAAW,EAAE,EAAE,kBAAkB,CAAC,CAAC,AAAC;IACxE,IAAI,oCAAU,SAAS,CAAC,UAAU,CAAC,EAC/B,MAAM,KAAK,CAAC,qEAAqE,CAAC,CAAC;SAGnF,OAAO,OAAO,CAAC,gBAAS,CAAC,kBAAW,EAAE,EAAE,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;CAEtE;AAED,cAAc,GAAG;mBACb,mCAAa;CAChB,CAAC","sources":["src/index.js","src/utils.js"],"sourcesContent":["const path = require('path');\nconst { isHttpURL } = require('./utils');\n\nconst compassconfig = _getCompassConfig();\nconst deviceMap = compassconfig.deviceMap;\nconst serviceMap = compassconfig.serviceMap;\n\nfunction getServiceURL(service) {\n    const serviceData = serviceMap[service];\n    if (!serviceData) {\n        throw Error('COMPASS ERROR: Invalid service identifier');\n    }\n    const ip = deviceMap[serviceData.device]?.ip;\n    return `${serviceData.protocol}://${ip}:${serviceData.port}${serviceData.path}`;\n}\n\nfunction _getCompassConfig() {\n    const compassrc = require(path.join(process.cwd(), '/.compassrc.json'));\n    if (isHttpURL(compassrc.configpath)) {\n        throw Error('COMPASS ERROR: Compass currently only supports locally hosted files');\n        // TODO: return compassrc.configpath;\n    } else {\n        return require(path.join(process.cwd(), compassrc.configpath));\n    }\n}\n\nmodule.exports = {\n    getServiceURL,\n};","function isHttpURL(string) {\n    let url;\n\n    try {\n        url = new URL(string);\n    } catch (_) {\n        return false;\n    }\n\n    return url.protocol === \"http:\" || url.protocol === \"https:\";\n}\n\nmodule.exports = {\n    isHttpURL,\n};"],"names":[],"version":3,"file":"index.js.map"}